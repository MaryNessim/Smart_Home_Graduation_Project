
Q9_MaryEhab_SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00000fbe  00001052  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000b8  008000b8  000010aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002660  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010dc  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012b0  00000000  00000000  00004b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00005dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a2  00000000  00000000  000061fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010a2  00000000  00000000  00006b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00007c40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_7>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	6c 00       	.word	0x006c	; ????
  56:	70 00       	.word	0x0070	; ????
  58:	74 00       	.word	0x0074	; ????
  5a:	7b 00       	.word	0x007b	; ????
  5c:	7f 00       	.word	0x007f	; ????
  5e:	86 00       	.word	0x0086	; ????
  60:	8d 00       	.word	0x008d	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	ee eb       	ldi	r30, 0xBE	; 190
  76:	ff e0       	ldi	r31, 0x0F	; 15
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a8 3b       	cpi	r26, 0xB8	; 184
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a8 eb       	ldi	r26, 0xB8	; 184
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a2 3d       	cpi	r26, 0xD2	; 210
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 50 04 	call	0x8a0	; 0x8a0 <main>
  98:	0c 94 dd 07 	jmp	0xfba	; 0xfba <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <ADC_Init>:

uint16 ADC_Value = 0;

void ADC_Init(void)
{
	SET_BIT(ADCSRA,1);
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADMUX,6);
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,7);
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	86 b9       	out	0x06, r24	; 6
  b8:	08 95       	ret

000000ba <ADC_Conversion>:
}

uint16 ADC_Conversion(ADC_Channel_t Channel)
{
  ba:	e8 2f       	mov	r30, r24
	
	uint16 ADC_Value;
	
	ADMUX &= 0b11100000;
  bc:	87 b1       	in	r24, 0x07	; 7
  be:	80 7e       	andi	r24, 0xE0	; 224
  c0:	87 b9       	out	0x07, r24	; 7
	
	switch (Channel)
  c2:	8e 2f       	mov	r24, r30
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	e7 30       	cpi	r30, 0x07	; 7
  cc:	f1 05       	cpc	r31, r1
  ce:	70 f5       	brcc	.+92     	; 0x12c <ADC_Conversion+0x72>
  d0:	e6 5d       	subi	r30, 0xD6	; 214
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__tablejump2__>
	{
		
		case ADC0 :
		break;
		case ADC1 :	SET_BIT(ADMUX,0);
  d8:	87 b1       	in	r24, 0x07	; 7
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	87 b9       	out	0x07, r24	; 7
		break;
  de:	26 c0       	rjmp	.+76     	; 0x12c <ADC_Conversion+0x72>
		case ADC2 :	SET_BIT(ADMUX,1);
  e0:	87 b1       	in	r24, 0x07	; 7
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	87 b9       	out	0x07, r24	; 7
		break;
  e6:	22 c0       	rjmp	.+68     	; 0x12c <ADC_Conversion+0x72>
		case ADC3 :	SET_BIT(ADMUX,1);SET_BIT(ADMUX,0);
  e8:	87 b1       	in	r24, 0x07	; 7
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	87 b9       	out	0x07, r24	; 7
  ee:	87 b1       	in	r24, 0x07	; 7
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	87 b9       	out	0x07, r24	; 7
		break;
  f4:	1b c0       	rjmp	.+54     	; 0x12c <ADC_Conversion+0x72>
		case ADC4 :	SET_BIT(ADMUX,2);
  f6:	87 b1       	in	r24, 0x07	; 7
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	87 b9       	out	0x07, r24	; 7
		break;
  fc:	17 c0       	rjmp	.+46     	; 0x12c <ADC_Conversion+0x72>
		case ADC5 :	SET_BIT(ADMUX,2);SET_BIT(ADMUX,0);
  fe:	87 b1       	in	r24, 0x07	; 7
 100:	84 60       	ori	r24, 0x04	; 4
 102:	87 b9       	out	0x07, r24	; 7
 104:	87 b1       	in	r24, 0x07	; 7
 106:	81 60       	ori	r24, 0x01	; 1
 108:	87 b9       	out	0x07, r24	; 7
		break;
 10a:	10 c0       	rjmp	.+32     	; 0x12c <ADC_Conversion+0x72>
		case ADC6 :	SET_BIT(ADMUX,2);SET_BIT(ADMUX,1);
 10c:	87 b1       	in	r24, 0x07	; 7
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	87 b9       	out	0x07, r24	; 7
 112:	87 b1       	in	r24, 0x07	; 7
 114:	82 60       	ori	r24, 0x02	; 2
 116:	87 b9       	out	0x07, r24	; 7
		break;
 118:	09 c0       	rjmp	.+18     	; 0x12c <ADC_Conversion+0x72>
		case ADC7 :	SET_BIT(ADMUX,2);SET_BIT(ADMUX,1);SET_BIT(ADMUX,0);
 11a:	87 b1       	in	r24, 0x07	; 7
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	87 b9       	out	0x07, r24	; 7
 120:	87 b1       	in	r24, 0x07	; 7
 122:	82 60       	ori	r24, 0x02	; 2
 124:	87 b9       	out	0x07, r24	; 7
 126:	87 b1       	in	r24, 0x07	; 7
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	87 b9       	out	0x07, r24	; 7
		default:
		break;
	}
	
	
	SET_BIT(ADCSRA,6);
 12c:	86 b1       	in	r24, 0x06	; 6
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	86 b9       	out	0x06, r24	; 6
	
	while(1)
	{
		if (LOW==READ_BIT(ADCSRA,6))
 132:	36 99       	sbic	0x06, 6	; 6
 134:	fe cf       	rjmp	.-4      	; 0x132 <ADC_Conversion+0x78>
		{
			ADC_Value=ADC;
 136:	84 b1       	in	r24, 0x04	; 4
 138:	95 b1       	in	r25, 0x05	; 5
			break;
		}
	}
	
	return ADC_Value;
 13a:	08 95       	ret

0000013c <bluetooth>:
#include "Dio_cfg.h"
#include "UART.h"


void bluetooth (uint8 text)
{
 13c:	cf 93       	push	r28
 13e:	c8 2f       	mov	r28, r24
	UART_Init();
 140:	0e 94 88 05 	call	0xb10	; 0xb10 <UART_Init>
	UART_Send_data(text);
 144:	8c 2f       	mov	r24, r28
 146:	0e 94 92 05 	call	0xb24	; 0xb24 <UART_Send_data>
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <Button0_Task>:
	
	if (Count2>2)
	{
		Actual_Button2 = New_Button2;
	}
	Old_Button2 = New_Button2;
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Dio_ReadPin>
 156:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <Old_Button0.1662>
 15a:	89 13       	cpse	r24, r25
 15c:	06 c0       	rjmp	.+12     	; 0x16a <Button0_Task+0x1c>
 15e:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <Count0.1661>
 162:	9f 5f       	subi	r25, 0xFF	; 255
 164:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <Count0.1661>
 168:	02 c0       	rjmp	.+4      	; 0x16e <Button0_Task+0x20>
 16a:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <Count0.1661>
 16e:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <Count0.1661>
 172:	93 30       	cpi	r25, 0x03	; 3
 174:	10 f0       	brcs	.+4      	; 0x17a <Button0_Task+0x2c>
 176:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <Actual_Button0>
 17a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <Old_Button0.1662>
 17e:	08 95       	ret

00000180 <Button1_Task>:
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Dio_ReadPin>
 188:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <Old_Button1.1668>
 18c:	89 13       	cpse	r24, r25
 18e:	06 c0       	rjmp	.+12     	; 0x19c <Button1_Task+0x1c>
 190:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <__data_end>
 194:	9f 5f       	subi	r25, 0xFF	; 255
 196:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__data_end>
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <Button1_Task+0x20>
 19c:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__data_end>
 1a0:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <__data_end>
 1a4:	93 30       	cpi	r25, 0x03	; 3
 1a6:	10 f0       	brcs	.+4      	; 0x1ac <Button1_Task+0x2c>
 1a8:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <Actual_Button1>
 1ac:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <Old_Button1.1668>
 1b0:	08 95       	ret

000001b2 <Button_Read_actual>:

uint8 Button_Read_actual(Button_Name_t Button_Name)
{
	uint8 Button_Level=0;
	
	switch(Button_Name)
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	39 f0       	breq	.+14     	; 0x1c4 <Button_Read_actual+0x12>
 1b6:	18 f0       	brcs	.+6      	; 0x1be <Button_Read_actual+0xc>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	39 f0       	breq	.+14     	; 0x1ca <Button_Read_actual+0x18>
 1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <Button_Read_actual+0x1e>
	{
		case BUTTON0 :
		
		Button_Level = Actual_Button0;
 1be:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <Actual_Button0>
		break;
 1c2:	08 95       	ret
		
		case BUTTON1 :
		
		Button_Level = Actual_Button1;
 1c4:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <Actual_Button1>
		break;
 1c8:	08 95       	ret
		
		case BUTTON2 :
		
		Button_Level = Actual_Button2;
 1ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <Actual_Button2>
		break;
 1ce:	08 95       	ret
}


uint8 Button_Read_actual(Button_Name_t Button_Name)
{
	uint8 Button_Level=0;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
		
		default:	break;
	}
	
	return Button_Level;
}
 1d2:	08 95       	ret

000001d4 <Buzzer_Handler>:
#include "Dio.h"
#include "Buzzer.h"

void Buzzer_Handler(uint8 level)
{
	if (level==HIGH)
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	31 f4       	brne	.+12     	; 0x1e4 <Buzzer_Handler+0x10>
	{
		Dio_WritePin(PD,4,HIGH);
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 1e2:	08 95       	ret
	}
	else
	{
		Dio_WritePin(PD,4,LOW);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	64 e0       	ldi	r22, 0x04	; 4
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 1ee:	08 95       	ret

000001f0 <Buzzer_Toggle>:
}

void Buzzer_Toggle(void)
{
	static uint8 F_State=0;
	if (1==F_State)
 1f0:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <F_State.1637>
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	41 f4       	brne	.+16     	; 0x208 <Buzzer_Toggle+0x18>
	{
		Dio_WritePin(PD,4,HIGH);
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	64 e0       	ldi	r22, 0x04	; 4
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
		F_State=0;
 202:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <F_State.1637>
 206:	08 95       	ret
	}
	else
	{
		Dio_WritePin(PD,4,LOW);
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	64 e0       	ldi	r22, 0x04	; 4
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
		F_State=1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <F_State.1637>
 218:	08 95       	ret

0000021a <Dio_WritePin>:
extern const Dio_pin_state_t Pin_state[LAST_PIN];

void  Dio_WritePin (Dio_port_t port_num, uint8 pin_num, uint8 Level)
{

    switch(port_num)
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	01 f1       	breq	.+64     	; 0x25e <Dio_WritePin+0x44>
 21e:	30 f0       	brcs	.+12     	; 0x22c <Dio_WritePin+0x12>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	b1 f1       	breq	.+108    	; 0x290 <Dio_WritePin+0x76>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	09 f4       	brne	.+2      	; 0x22a <Dio_WritePin+0x10>
 228:	4c c0       	rjmp	.+152    	; 0x2c2 <Dio_WritePin+0xa8>
 22a:	08 95       	ret
    {
        case PA:
			if ( HIGH == Level)
 22c:	41 30       	cpi	r20, 0x01	; 1
 22e:	59 f4       	brne	.+22     	; 0x246 <Dio_WritePin+0x2c>
			{
				SET_BIT(PORTA,pin_num);
 230:	2b b3       	in	r18, 0x1b	; 27
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <Dio_WritePin+0x22>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <Dio_WritePin+0x1e>
 240:	82 2b       	or	r24, r18
 242:	8b bb       	out	0x1b, r24	; 27
 244:	08 95       	ret
			}
			else 
			{
				CLEAR_BIT(PORTA,pin_num);
 246:	2b b3       	in	r18, 0x1b	; 27
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <Dio_WritePin+0x38>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <Dio_WritePin+0x34>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	8b bb       	out	0x1b, r24	; 27
 25c:	08 95       	ret
			}
        break;
        case PB:
			if ( HIGH == Level)
 25e:	41 30       	cpi	r20, 0x01	; 1
 260:	59 f4       	brne	.+22     	; 0x278 <Dio_WritePin+0x5e>
			{
				SET_BIT(PORTB,pin_num);
 262:	28 b3       	in	r18, 0x18	; 24
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <Dio_WritePin+0x54>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <Dio_WritePin+0x50>
 272:	82 2b       	or	r24, r18
 274:	88 bb       	out	0x18, r24	; 24
 276:	08 95       	ret
			}
			else 
			{
				CLEAR_BIT(PORTB,pin_num);
 278:	28 b3       	in	r18, 0x18	; 24
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <Dio_WritePin+0x6a>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <Dio_WritePin+0x66>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	88 bb       	out	0x18, r24	; 24
 28e:	08 95       	ret
			}        
		break;
        case PC:
			if ( HIGH == Level)
 290:	41 30       	cpi	r20, 0x01	; 1
 292:	59 f4       	brne	.+22     	; 0x2aa <Dio_WritePin+0x90>
			{
				SET_BIT(PORTC,pin_num);
 294:	25 b3       	in	r18, 0x15	; 21
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <Dio_WritePin+0x86>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <Dio_WritePin+0x82>
 2a4:	82 2b       	or	r24, r18
 2a6:	85 bb       	out	0x15, r24	; 21
 2a8:	08 95       	ret
			}
			else 
			{
				CLEAR_BIT(PORTC,pin_num);
 2aa:	25 b3       	in	r18, 0x15	; 21
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <Dio_WritePin+0x9c>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <Dio_WritePin+0x98>
 2ba:	80 95       	com	r24
 2bc:	82 23       	and	r24, r18
 2be:	85 bb       	out	0x15, r24	; 21
 2c0:	08 95       	ret
			}
        break;
        case PD:
			if ( HIGH == Level)
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	59 f4       	brne	.+22     	; 0x2dc <Dio_WritePin+0xc2>
			{
				SET_BIT(PORTD,pin_num);
 2c6:	22 b3       	in	r18, 0x12	; 18
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <Dio_WritePin+0xb8>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <Dio_WritePin+0xb4>
 2d6:	82 2b       	or	r24, r18
 2d8:	82 bb       	out	0x12, r24	; 18
 2da:	08 95       	ret
			}
			else 
			{
				CLEAR_BIT(PORTD,pin_num);
 2dc:	22 b3       	in	r18, 0x12	; 18
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <Dio_WritePin+0xce>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <Dio_WritePin+0xca>
 2ec:	80 95       	com	r24
 2ee:	82 23       	and	r24, r18
 2f0:	82 bb       	out	0x12, r24	; 18
 2f2:	08 95       	ret

000002f4 <Dio_ReadPin>:
uint8 Dio_ReadPin  (Dio_port_t port_num, uint8 pin_num)
{

	uint8 pin_Level = LOW;
	
    switch(port_num)
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	79 f0       	breq	.+30     	; 0x316 <Dio_ReadPin+0x22>
 2f8:	28 f0       	brcs	.+10     	; 0x304 <Dio_ReadPin+0x10>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	a9 f0       	breq	.+42     	; 0x328 <Dio_ReadPin+0x34>
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	e1 f0       	breq	.+56     	; 0x33a <Dio_ReadPin+0x46>
 302:	24 c0       	rjmp	.+72     	; 0x34c <Dio_ReadPin+0x58>
    {
        case PA:
			pin_Level = READ_BIT(PINA,pin_num);
 304:	89 b3       	in	r24, 0x19	; 25
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <Dio_ReadPin+0x1a>
 30a:	95 95       	asr	r25
 30c:	87 95       	ror	r24
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <Dio_ReadPin+0x16>
 312:	81 70       	andi	r24, 0x01	; 1
        break;
 314:	08 95       	ret
        case PB:
			pin_Level = READ_BIT(PINB,pin_num);
 316:	86 b3       	in	r24, 0x16	; 22
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <Dio_ReadPin+0x2c>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <Dio_ReadPin+0x28>
 324:	81 70       	andi	r24, 0x01	; 1
        break;
 326:	08 95       	ret
        case PC:
			pin_Level = READ_BIT(PINC,pin_num);
 328:	83 b3       	in	r24, 0x13	; 19
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <Dio_ReadPin+0x3e>
 32e:	95 95       	asr	r25
 330:	87 95       	ror	r24
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <Dio_ReadPin+0x3a>
 336:	81 70       	andi	r24, 0x01	; 1
        break;
 338:	08 95       	ret
        case PD:
			pin_Level = READ_BIT(PIND,pin_num);
 33a:	80 b3       	in	r24, 0x10	; 16
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <Dio_ReadPin+0x50>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <Dio_ReadPin+0x4c>
 348:	81 70       	andi	r24, 0x01	; 1
        break;
 34a:	08 95       	ret


uint8 Dio_ReadPin  (Dio_port_t port_num, uint8 pin_num)
{

	uint8 pin_Level = LOW;
 34c:	80 e0       	ldi	r24, 0x00	; 0
        default:
        break;
    }
    
    return pin_Level;
} /* END OF Dio_ReadPin () */
 34e:	08 95       	ret

00000350 <Dio_Init>:
void Dio_Init (void)
{
    Dio_port_t port;
    uint8 pin,i;

    for(i=0;i<LAST_PIN;i++)
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	c6 c0       	rjmp	.+396    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
    {
        port = i / 8;
 354:	98 2f       	mov	r25, r24
 356:	96 95       	lsr	r25
 358:	96 95       	lsr	r25
 35a:	96 95       	lsr	r25
        pin  = i % 8;
 35c:	28 2f       	mov	r18, r24
 35e:	27 70       	andi	r18, 0x07	; 7

        switch(port)
 360:	91 30       	cpi	r25, 0x01	; 1
 362:	b1 f1       	breq	.+108    	; 0x3d0 <Dio_Init+0x80>
 364:	38 f0       	brcs	.+14     	; 0x374 <Dio_Init+0x24>
 366:	92 30       	cpi	r25, 0x02	; 2
 368:	09 f4       	brne	.+2      	; 0x36c <Dio_Init+0x1c>
 36a:	60 c0       	rjmp	.+192    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 36c:	93 30       	cpi	r25, 0x03	; 3
 36e:	09 f4       	brne	.+2      	; 0x372 <Dio_Init+0x22>
 370:	8a c0       	rjmp	.+276    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 372:	b5 c0       	rjmp	.+362    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
        {
            case PA:
				if (OUTPUT == Pin_state[i])
 374:	48 2f       	mov	r20, r24
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	fa 01       	movw	r30, r20
 37a:	e0 5a       	subi	r30, 0xA0	; 160
 37c:	ff 4f       	sbci	r31, 0xFF	; 255
 37e:	90 81       	ld	r25, Z
 380:	91 11       	cpse	r25, r1
 382:	0d c0       	rjmp	.+26     	; 0x39e <Dio_Init+0x4e>
				{
					SET_BIT(DDRA,pin);
 384:	9a b3       	in	r25, 0x1a	; 26
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	ba 01       	movw	r22, r20
 38c:	02 c0       	rjmp	.+4      	; 0x392 <Dio_Init+0x42>
 38e:	66 0f       	add	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	2a 95       	dec	r18
 394:	e2 f7       	brpl	.-8      	; 0x38e <Dio_Init+0x3e>
 396:	9b 01       	movw	r18, r22
 398:	29 2b       	or	r18, r25
 39a:	2a bb       	out	0x1a, r18	; 26
 39c:	a0 c0       	rjmp	.+320    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
				}
				else 
				{
					CLEAR_BIT(DDRA,pin);
 39e:	9a b3       	in	r25, 0x1a	; 26
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	fb 01       	movw	r30, r22
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <Dio_Init+0x5c>
 3a8:	ee 0f       	add	r30, r30
 3aa:	ff 1f       	adc	r31, r31
 3ac:	2a 95       	dec	r18
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <Dio_Init+0x58>
 3b0:	9f 01       	movw	r18, r30
 3b2:	6e 2f       	mov	r22, r30
 3b4:	60 95       	com	r22
 3b6:	96 23       	and	r25, r22
 3b8:	9a bb       	out	0x1a, r25	; 26
					if (INPULLUP == Pin_state[i])
 3ba:	fa 01       	movw	r30, r20
 3bc:	e0 5a       	subi	r30, 0xA0	; 160
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	90 81       	ld	r25, Z
 3c2:	91 30       	cpi	r25, 0x01	; 1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <Dio_Init+0x78>
 3c6:	8b c0       	rjmp	.+278    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
					{
						SET_BIT(PORTA,pin);
 3c8:	9b b3       	in	r25, 0x1b	; 27
 3ca:	29 2b       	or	r18, r25
 3cc:	2b bb       	out	0x1b, r18	; 27
 3ce:	87 c0       	rjmp	.+270    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
					}
				}
            break;
            case PB:
				if (OUTPUT == Pin_state[i])
 3d0:	48 2f       	mov	r20, r24
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	fa 01       	movw	r30, r20
 3d6:	e0 5a       	subi	r30, 0xA0	; 160
 3d8:	ff 4f       	sbci	r31, 0xFF	; 255
 3da:	90 81       	ld	r25, Z
 3dc:	91 11       	cpse	r25, r1
 3de:	0d c0       	rjmp	.+26     	; 0x3fa <Dio_Init+0xaa>
				{
					SET_BIT(DDRB,pin);
 3e0:	97 b3       	in	r25, 0x17	; 23
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	ba 01       	movw	r22, r20
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <Dio_Init+0x9e>
 3ea:	66 0f       	add	r22, r22
 3ec:	77 1f       	adc	r23, r23
 3ee:	2a 95       	dec	r18
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <Dio_Init+0x9a>
 3f2:	9b 01       	movw	r18, r22
 3f4:	29 2b       	or	r18, r25
 3f6:	27 bb       	out	0x17, r18	; 23
 3f8:	72 c0       	rjmp	.+228    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
				}
				else 
				{
					CLEAR_BIT(DDRB,pin);
 3fa:	97 b3       	in	r25, 0x17	; 23
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	fb 01       	movw	r30, r22
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	2a 95       	dec	r18
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	9f 01       	movw	r18, r30
 40e:	6e 2f       	mov	r22, r30
 410:	60 95       	com	r22
 412:	96 23       	and	r25, r22
 414:	97 bb       	out	0x17, r25	; 23
					if (INPULLUP == Pin_state[i])
 416:	fa 01       	movw	r30, r20
 418:	e0 5a       	subi	r30, 0xA0	; 160
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	90 81       	ld	r25, Z
 41e:	91 30       	cpi	r25, 0x01	; 1
 420:	09 f0       	breq	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 422:	5d c0       	rjmp	.+186    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
					{
						SET_BIT(PORTB,pin);
 424:	98 b3       	in	r25, 0x18	; 24
 426:	29 2b       	or	r18, r25
 428:	28 bb       	out	0x18, r18	; 24
 42a:	59 c0       	rjmp	.+178    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
					}
				}
            break;
            case PC:
				if (OUTPUT == Pin_state[i])
 42c:	48 2f       	mov	r20, r24
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	fa 01       	movw	r30, r20
 432:	e0 5a       	subi	r30, 0xA0	; 160
 434:	ff 4f       	sbci	r31, 0xFF	; 255
 436:	90 81       	ld	r25, Z
 438:	91 11       	cpse	r25, r1
 43a:	0d c0       	rjmp	.+26     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
				{
					SET_BIT(DDRC,pin);
 43c:	94 b3       	in	r25, 0x14	; 20
 43e:	41 e0       	ldi	r20, 0x01	; 1
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	ba 01       	movw	r22, r20
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	2a 95       	dec	r18
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	9b 01       	movw	r18, r22
 450:	29 2b       	or	r18, r25
 452:	24 bb       	out	0x14, r18	; 20
 454:	44 c0       	rjmp	.+136    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
				}
				else 
				{
					CLEAR_BIT(DDRC,pin);
 456:	94 b3       	in	r25, 0x14	; 20
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	fb 01       	movw	r30, r22
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	ee 0f       	add	r30, r30
 462:	ff 1f       	adc	r31, r31
 464:	2a 95       	dec	r18
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	9f 01       	movw	r18, r30
 46a:	6e 2f       	mov	r22, r30
 46c:	60 95       	com	r22
 46e:	96 23       	and	r25, r22
 470:	94 bb       	out	0x14, r25	; 20
					if (INPULLUP == Pin_state[i])
 472:	fa 01       	movw	r30, r20
 474:	e0 5a       	subi	r30, 0xA0	; 160
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	90 81       	ld	r25, Z
 47a:	91 30       	cpi	r25, 0x01	; 1
 47c:	81 f5       	brne	.+96     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
					{
						SET_BIT(PORTC,pin);
 47e:	95 b3       	in	r25, 0x15	; 21
 480:	29 2b       	or	r18, r25
 482:	25 bb       	out	0x15, r18	; 21
 484:	2c c0       	rjmp	.+88     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
					}
				}
            break;
            case PD:
				if (OUTPUT == Pin_state[i])
 486:	48 2f       	mov	r20, r24
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	fa 01       	movw	r30, r20
 48c:	e0 5a       	subi	r30, 0xA0	; 160
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	90 81       	ld	r25, Z
 492:	91 11       	cpse	r25, r1
 494:	0d c0       	rjmp	.+26     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
				{
					SET_BIT(DDRD,pin);
 496:	91 b3       	in	r25, 0x11	; 17
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	ba 01       	movw	r22, r20
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	2a 95       	dec	r18
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a8:	9b 01       	movw	r18, r22
 4aa:	29 2b       	or	r18, r25
 4ac:	21 bb       	out	0x11, r18	; 17
 4ae:	17 c0       	rjmp	.+46     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
				}
				else 
				{
					CLEAR_BIT(DDRD,pin);
 4b0:	91 b3       	in	r25, 0x11	; 17
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	fb 01       	movw	r30, r22
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4ba:	ee 0f       	add	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	2a 95       	dec	r18
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4c2:	9f 01       	movw	r18, r30
 4c4:	6e 2f       	mov	r22, r30
 4c6:	60 95       	com	r22
 4c8:	96 23       	and	r25, r22
 4ca:	91 bb       	out	0x11, r25	; 17
					if (INPULLUP == Pin_state[i])
 4cc:	fa 01       	movw	r30, r20
 4ce:	e0 5a       	subi	r30, 0xA0	; 160
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	90 81       	ld	r25, Z
 4d4:	91 30       	cpi	r25, 0x01	; 1
 4d6:	19 f4       	brne	.+6      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
					{
						SET_BIT(PORTD,pin);
 4d8:	92 b3       	in	r25, 0x12	; 18
 4da:	29 2b       	or	r18, r25
 4dc:	22 bb       	out	0x12, r18	; 18
void Dio_Init (void)
{
    Dio_port_t port;
    uint8 pin,i;

    for(i=0;i<LAST_PIN;i++)
 4de:	8f 5f       	subi	r24, 0xFF	; 255
 4e0:	80 32       	cpi	r24, 0x20	; 32
 4e2:	08 f4       	brcc	.+2      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4e4:	37 cf       	rjmp	.-402    	; 0x354 <Dio_Init+0x4>
			default:
            
            break;
        }
    }
 4e6:	08 95       	ret

000004e8 <Elec_Valve>:
#include "Electric_Valve.h"


void Elec_Valve(uint8 level)
{
	if (HIGH==level)
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <Elec_Valve+0xa>
	{
		Relay_Handler(HIGH);
 4ec:	0e 94 61 04 	call	0x8c2	; 0x8c2 <Relay_Handler>
 4f0:	08 95       	ret
	} 
	else
	{
		Relay_Handler(LOW);
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 61 04 	call	0x8c2	; 0x8c2 <Relay_Handler>
 4f8:	08 95       	ret

000004fa <Lcd_Data>:
}

void Lcd_Shift_Left(void)
{
	Lcd_command(0x01);
	Lcd_command(0x08);
 4fa:	cf 93       	push	r28
 4fc:	c8 2f       	mov	r28, r24
 4fe:	80 ff       	sbrs	r24, 0
 500:	06 c0       	rjmp	.+12     	; 0x50e <Lcd_Data+0x14>
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	64 e0       	ldi	r22, 0x04	; 4
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 50c:	05 c0       	rjmp	.+10     	; 0x518 <Lcd_Data+0x1e>
 50e:	40 e0       	ldi	r20, 0x00	; 0
 510:	64 e0       	ldi	r22, 0x04	; 4
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 518:	c1 ff       	sbrs	r28, 1
 51a:	06 c0       	rjmp	.+12     	; 0x528 <Lcd_Data+0x2e>
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	65 e0       	ldi	r22, 0x05	; 5
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 526:	05 c0       	rjmp	.+10     	; 0x532 <Lcd_Data+0x38>
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	65 e0       	ldi	r22, 0x05	; 5
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 532:	c2 ff       	sbrs	r28, 2
 534:	06 c0       	rjmp	.+12     	; 0x542 <Lcd_Data+0x48>
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	66 e0       	ldi	r22, 0x06	; 6
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 540:	05 c0       	rjmp	.+10     	; 0x54c <Lcd_Data+0x52>
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	66 e0       	ldi	r22, 0x06	; 6
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 54c:	c3 ff       	sbrs	r28, 3
 54e:	06 c0       	rjmp	.+12     	; 0x55c <Lcd_Data+0x62>
 550:	41 e0       	ldi	r20, 0x01	; 1
 552:	67 e0       	ldi	r22, 0x07	; 7
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 55a:	05 c0       	rjmp	.+10     	; 0x566 <Lcd_Data+0x6c>
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	67 e0       	ldi	r22, 0x07	; 7
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <Lcd_command>:
 56a:	cf 93       	push	r28
 56c:	c8 2f       	mov	r28, r24
 56e:	40 e0       	ldi	r20, 0x00	; 0
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 578:	8c 2f       	mov	r24, r28
 57a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Lcd_Data>
 57e:	41 e0       	ldi	r20, 0x01	; 1
 580:	63 e0       	ldi	r22, 0x03	; 3
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 588:	87 eb       	ldi	r24, 0xB7	; 183
 58a:	9b e0       	ldi	r25, 0x0B	; 11
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <Lcd_command+0x22>
 590:	00 c0       	rjmp	.+0      	; 0x592 <Lcd_command+0x28>
 592:	00 00       	nop
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	63 e0       	ldi	r22, 0x03	; 3
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 59e:	87 eb       	ldi	r24, 0xB7	; 183
 5a0:	9b e0       	ldi	r25, 0x0B	; 11
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <Lcd_command+0x38>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <Lcd_command+0x3e>
 5a8:	00 00       	nop
 5aa:	cf 91       	pop	r28
 5ac:	08 95       	ret

000005ae <Lcd_Clear>:
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 5ba:	08 95       	ret

000005bc <Lcd_Set_Cursor>:
 5bc:	cf 93       	push	r28
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	61 f4       	brne	.+24     	; 0x5da <Lcd_Set_Cursor+0x1e>
 5c2:	80 e8       	ldi	r24, 0x80	; 128
 5c4:	86 0f       	add	r24, r22
 5c6:	c6 2f       	mov	r28, r22
 5c8:	cf 70       	andi	r28, 0x0F	; 15
 5ca:	82 95       	swap	r24
 5cc:	8f 70       	andi	r24, 0x0F	; 15
 5ce:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 5d2:	8c 2f       	mov	r24, r28
 5d4:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 5d8:	0d c0       	rjmp	.+26     	; 0x5f4 <Lcd_Set_Cursor+0x38>
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	59 f4       	brne	.+22     	; 0x5f4 <Lcd_Set_Cursor+0x38>
 5de:	80 ec       	ldi	r24, 0xC0	; 192
 5e0:	86 0f       	add	r24, r22
 5e2:	c6 2f       	mov	r28, r22
 5e4:	cf 70       	andi	r28, 0x0F	; 15
 5e6:	82 95       	swap	r24
 5e8:	8f 70       	andi	r24, 0x0F	; 15
 5ea:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 5ee:	8c 2f       	mov	r24, r28
 5f0:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <Lcd_Init>:
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Lcd_Data>
 5fe:	8f e5       	ldi	r24, 0x5F	; 95
 600:	9a ee       	ldi	r25, 0xEA	; 234
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <Lcd_Init+0xa>
 606:	00 c0       	rjmp	.+0      	; 0x608 <Lcd_Init+0x10>
 608:	00 00       	nop
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 610:	87 e9       	ldi	r24, 0x97	; 151
 612:	9a e3       	ldi	r25, 0x3A	; 58
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <Lcd_Init+0x1c>
 618:	00 c0       	rjmp	.+0      	; 0x61a <Lcd_Init+0x22>
 61a:	00 00       	nop
 61c:	83 e0       	ldi	r24, 0x03	; 3
 61e:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 622:	87 ee       	ldi	r24, 0xE7	; 231
 624:	90 e8       	ldi	r25, 0x80	; 128
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <Lcd_Init+0x2e>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <Lcd_Init+0x34>
 62c:	00 00       	nop
 62e:	83 e0       	ldi	r24, 0x03	; 3
 630:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 634:	82 e0       	ldi	r24, 0x02	; 2
 636:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 63a:	82 e0       	ldi	r24, 0x02	; 2
 63c:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 640:	88 e0       	ldi	r24, 0x08	; 8
 642:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 64c:	8c e0       	ldi	r24, 0x0C	; 12
 64e:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 658:	86 e0       	ldi	r24, 0x06	; 6
 65a:	0e 94 b5 02 	call	0x56a	; 0x56a <Lcd_command>
 65e:	08 95       	ret

00000660 <Lcd_Write_Char>:
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	d8 2f       	mov	r29, r24
 666:	df 70       	andi	r29, 0x0F	; 15
 668:	c8 2f       	mov	r28, r24
 66a:	c0 7f       	andi	r28, 0xF0	; 240
 66c:	41 e0       	ldi	r20, 0x01	; 1
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 676:	8c 2f       	mov	r24, r28
 678:	82 95       	swap	r24
 67a:	8f 70       	andi	r24, 0x0F	; 15
 67c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Lcd_Data>
 680:	41 e0       	ldi	r20, 0x01	; 1
 682:	63 e0       	ldi	r22, 0x03	; 3
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 68a:	87 eb       	ldi	r24, 0xB7	; 183
 68c:	9b e0       	ldi	r25, 0x0B	; 11
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <Lcd_Write_Char+0x2e>
 692:	00 c0       	rjmp	.+0      	; 0x694 <Lcd_Write_Char+0x34>
 694:	00 00       	nop
 696:	40 e0       	ldi	r20, 0x00	; 0
 698:	63 e0       	ldi	r22, 0x03	; 3
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 6a0:	87 eb       	ldi	r24, 0xB7	; 183
 6a2:	9b e0       	ldi	r25, 0x0B	; 11
 6a4:	01 97       	sbiw	r24, 0x01	; 1
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <Lcd_Write_Char+0x44>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <Lcd_Write_Char+0x4a>
 6aa:	00 00       	nop
 6ac:	8d 2f       	mov	r24, r29
 6ae:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Lcd_Data>
 6b2:	41 e0       	ldi	r20, 0x01	; 1
 6b4:	63 e0       	ldi	r22, 0x03	; 3
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 6bc:	87 eb       	ldi	r24, 0xB7	; 183
 6be:	9b e0       	ldi	r25, 0x0B	; 11
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <Lcd_Write_Char+0x60>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <Lcd_Write_Char+0x66>
 6c6:	00 00       	nop
 6c8:	40 e0       	ldi	r20, 0x00	; 0
 6ca:	63 e0       	ldi	r22, 0x03	; 3
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 6d2:	87 eb       	ldi	r24, 0xB7	; 183
 6d4:	9b e0       	ldi	r25, 0x0B	; 11
 6d6:	01 97       	sbiw	r24, 0x01	; 1
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <Lcd_Write_Char+0x76>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <Lcd_Write_Char+0x7c>
 6dc:	00 00       	nop
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <Lcd_Write_String>:
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	8c 01       	movw	r16, r24
 6ec:	c0 e0       	ldi	r28, 0x00	; 0
 6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <Lcd_Write_String+0x12>
 6f0:	0e 94 30 03 	call	0x660	; 0x660 <Lcd_Write_Char>
 6f4:	cf 5f       	subi	r28, 0xFF	; 255
 6f6:	f8 01       	movw	r30, r16
 6f8:	ec 0f       	add	r30, r28
 6fa:	f1 1d       	adc	r31, r1
 6fc:	80 81       	ld	r24, Z
 6fe:	81 11       	cpse	r24, r1
 700:	f7 cf       	rjmp	.-18     	; 0x6f0 <Lcd_Write_String+0xc>
 702:	cf 91       	pop	r28
 704:	1f 91       	pop	r17
 706:	0f 91       	pop	r16
 708:	08 95       	ret

0000070a <NUM_to_ASCII>:
}
//End LCD 4 Bit Interfacing Functions

void NUM_to_ASCII(uint16 NUM)
{
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	00 d0       	rcall	.+0      	; 0x710 <NUM_to_ASCII+0x6>
 710:	00 d0       	rcall	.+0      	; 0x712 <NUM_to_ASCII+0x8>
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62
 716:	ac 01       	movw	r20, r24

	uint8 asccc[4]={0};
	uint8 No_Digit;

	asccc[0]	= NUM/1000;
 718:	9c 01       	movw	r18, r24
 71a:	36 95       	lsr	r19
 71c:	27 95       	ror	r18
 71e:	36 95       	lsr	r19
 720:	27 95       	ror	r18
 722:	36 95       	lsr	r19
 724:	27 95       	ror	r18
 726:	a5 ec       	ldi	r26, 0xC5	; 197
 728:	b0 e2       	ldi	r27, 0x20	; 32
 72a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__umulhisi3>
 72e:	92 95       	swap	r25
 730:	82 95       	swap	r24
 732:	8f 70       	andi	r24, 0x0F	; 15
 734:	89 27       	eor	r24, r25
 736:	9f 70       	andi	r25, 0x0F	; 15
 738:	89 27       	eor	r24, r25
	asccc[0]	+=  48;      // :ASCII of 0 = 48
 73a:	20 e3       	ldi	r18, 0x30	; 48
 73c:	28 0f       	add	r18, r24
 73e:	29 83       	std	Y+1, r18	; 0x01
	uint16 val1	= NUM%1000;
 740:	68 ee       	ldi	r22, 0xE8	; 232
 742:	73 e0       	ldi	r23, 0x03	; 3
 744:	86 9f       	mul	r24, r22
 746:	90 01       	movw	r18, r0
 748:	87 9f       	mul	r24, r23
 74a:	30 0d       	add	r19, r0
 74c:	96 9f       	mul	r25, r22
 74e:	30 0d       	add	r19, r0
 750:	11 24       	eor	r1, r1
 752:	42 1b       	sub	r20, r18
 754:	53 0b       	sbc	r21, r19
	
	asccc[1]	= val1/100;
 756:	9a 01       	movw	r18, r20
 758:	36 95       	lsr	r19
 75a:	27 95       	ror	r18
 75c:	36 95       	lsr	r19
 75e:	27 95       	ror	r18
 760:	ab e7       	ldi	r26, 0x7B	; 123
 762:	b4 e1       	ldi	r27, 0x14	; 20
 764:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__umulhisi3>
 768:	96 95       	lsr	r25
 76a:	87 95       	ror	r24
	asccc[1]	+=  48;
 76c:	20 e3       	ldi	r18, 0x30	; 48
 76e:	28 0f       	add	r18, r24
 770:	2a 83       	std	Y+2, r18	; 0x02
	val1		= val1%100;
 772:	64 e6       	ldi	r22, 0x64	; 100
 774:	68 9f       	mul	r22, r24
 776:	90 01       	movw	r18, r0
 778:	69 9f       	mul	r22, r25
 77a:	30 0d       	add	r19, r0
 77c:	11 24       	eor	r1, r1
 77e:	42 1b       	sub	r20, r18
 780:	53 0b       	sbc	r21, r19
	
	asccc[2]	= val1/10;
 782:	9a 01       	movw	r18, r20
 784:	ad ec       	ldi	r26, 0xCD	; 205
 786:	bc ec       	ldi	r27, 0xCC	; 204
 788:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__umulhisi3>
 78c:	96 95       	lsr	r25
 78e:	87 95       	ror	r24
 790:	96 95       	lsr	r25
 792:	87 95       	ror	r24
 794:	96 95       	lsr	r25
 796:	87 95       	ror	r24
	asccc[2]	+=  48;
 798:	20 e3       	ldi	r18, 0x30	; 48
 79a:	28 0f       	add	r18, r24
 79c:	2b 83       	std	Y+3, r18	; 0x03
	val1		= val1%10;
 79e:	9c 01       	movw	r18, r24
 7a0:	22 0f       	add	r18, r18
 7a2:	33 1f       	adc	r19, r19
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	88 0f       	add	r24, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	82 0f       	add	r24, r18
 7b2:	93 1f       	adc	r25, r19
 7b4:	48 1b       	sub	r20, r24
 7b6:	59 0b       	sbc	r21, r25
	
	asccc[3]	= val1/1;
	asccc[3]	+=  48;
 7b8:	40 5d       	subi	r20, 0xD0	; 208
 7ba:	4c 83       	std	Y+4, r20	; 0x04
	val1		= val1%1;
	
	for (No_Digit=0;No_Digit<=3;No_Digit++)
 7bc:	20 e0       	ldi	r18, 0x00	; 0
 7be:	0e c0       	rjmp	.+28     	; 0x7dc <NUM_to_ASCII+0xd2>
	{
		ASCII[No_Digit] = asccc[No_Digit];
 7c0:	82 2f       	mov	r24, r18
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	e1 e0       	ldi	r30, 0x01	; 1
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	ec 0f       	add	r30, r28
 7ca:	fd 1f       	adc	r31, r29
 7cc:	e8 0f       	add	r30, r24
 7ce:	f9 1f       	adc	r31, r25
 7d0:	30 81       	ld	r19, Z
 7d2:	fc 01       	movw	r30, r24
 7d4:	e6 53       	subi	r30, 0x36	; 54
 7d6:	ff 4f       	sbci	r31, 0xFF	; 255
 7d8:	30 83       	st	Z, r19
	
	asccc[3]	= val1/1;
	asccc[3]	+=  48;
	val1		= val1%1;
	
	for (No_Digit=0;No_Digit<=3;No_Digit++)
 7da:	2f 5f       	subi	r18, 0xFF	; 255
 7dc:	24 30       	cpi	r18, 0x04	; 4
 7de:	80 f3       	brcs	.-32     	; 0x7c0 <NUM_to_ASCII+0xb6>
	{
		ASCII[No_Digit] = asccc[No_Digit];
	}
	
	ASCII[4] = '\0';
 7e0:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <ASCII+0x4>
	
 7e4:	0f 90       	pop	r0
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
 7ea:	0f 90       	pop	r0
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	08 95       	ret

000007f2 <Led_Handler>:
#include "Dio.h"
#include "Led.h"

void Led_Handler(Led_Name_t Led , uint8 Level)
{
	switch(Led)
 7f2:	81 30       	cpi	r24, 0x01	; 1
 7f4:	51 f0       	breq	.+20     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7f6:	18 f0       	brcs	.+6      	; 0x7fe <Led_Handler+0xc>
 7f8:	82 30       	cpi	r24, 0x02	; 2
 7fa:	69 f0       	breq	.+26     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7fc:	08 95       	ret
	{
		case LED0:
		Dio_WritePin(PD,7,Level);
 7fe:	46 2f       	mov	r20, r22
 800:	67 e0       	ldi	r22, 0x07	; 7
 802:	83 e0       	ldi	r24, 0x03	; 3
 804:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
		break;
 808:	08 95       	ret
		
		case LED1:
		Dio_WritePin(PD,6,Level);
 80a:	46 2f       	mov	r20, r22
 80c:	66 e0       	ldi	r22, 0x06	; 6
 80e:	83 e0       	ldi	r24, 0x03	; 3
 810:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
		break;
 814:	08 95       	ret
		
		case LED2:
		Dio_WritePin(PD,5,Level);
 816:	46 2f       	mov	r20, r22
 818:	65 e0       	ldi	r22, 0x05	; 5
 81a:	83 e0       	ldi	r24, 0x03	; 3
 81c:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 820:	08 95       	ret

00000822 <Led1_Toggle>:


void Led1_Toggle(void)
{
	static uint8 F_State1=0;
	if (1==F_State1)
 822:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <F_State1.1655>
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	41 f4       	brne	.+16     	; 0x83a <Led1_Toggle+0x18>
	{
		Dio_WritePin(PD,7,HIGH);
 82a:	41 e0       	ldi	r20, 0x01	; 1
 82c:	67 e0       	ldi	r22, 0x07	; 7
 82e:	83 e0       	ldi	r24, 0x03	; 3
 830:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
		F_State1=0;
 834:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <F_State1.1655>
 838:	08 95       	ret
	}
	else
	{
		Dio_WritePin(PD,7,LOW);
 83a:	40 e0       	ldi	r20, 0x00	; 0
 83c:	67 e0       	ldi	r22, 0x07	; 7
 83e:	83 e0       	ldi	r24, 0x03	; 3
 840:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
		F_State1=1;
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <F_State1.1655>
 84a:	08 95       	ret

0000084c <Led2_Toggle>:
}

void Led2_Toggle(void)
{
	static uint8 F_State2=0;
	if (1==F_State2)
 84c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <F_State2.1659>
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	41 f4       	brne	.+16     	; 0x864 <__stack+0x5>
	{
		Dio_WritePin(PD,6,HIGH);
 854:	41 e0       	ldi	r20, 0x01	; 1
 856:	66 e0       	ldi	r22, 0x06	; 6
 858:	83 e0       	ldi	r24, 0x03	; 3
 85a:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
		F_State2=0;
 85e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <F_State2.1659>
 862:	08 95       	ret
	}
	else
	{
		Dio_WritePin(PD,6,LOW);
 864:	40 e0       	ldi	r20, 0x00	; 0
 866:	66 e0       	ldi	r22, 0x06	; 6
 868:	83 e0       	ldi	r24, 0x03	; 3
 86a:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
		F_State2=1;
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <F_State2.1659>
 874:	08 95       	ret

00000876 <Led3_Toggle>:


void Led3_Toggle(void)
{
	static uint8 F_State3=0;
	if (1==F_State3)
 876:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <F_State3.1663>
 87a:	81 30       	cpi	r24, 0x01	; 1
 87c:	41 f4       	brne	.+16     	; 0x88e <Led3_Toggle+0x18>
	{
		Dio_WritePin(PD,5,HIGH);
 87e:	41 e0       	ldi	r20, 0x01	; 1
 880:	65 e0       	ldi	r22, 0x05	; 5
 882:	83 e0       	ldi	r24, 0x03	; 3
 884:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
		F_State3=0;
 888:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <F_State3.1663>
 88c:	08 95       	ret
	}
	else
	{
		Dio_WritePin(PD,5,LOW);
 88e:	40 e0       	ldi	r20, 0x00	; 0
 890:	65 e0       	ldi	r22, 0x05	; 5
 892:	83 e0       	ldi	r24, 0x03	; 3
 894:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
		F_State3=1;
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <F_State3.1663>
 89e:	08 95       	ret

000008a0 <main>:
#include "LCD.h"
#include "UART.h"

int main(void)
{
	Dio_Init();
 8a0:	0e 94 a8 01 	call	0x350	; 0x350 <Dio_Init>
	Timer_Init();
 8a4:	0e 94 56 05 	call	0xaac	; 0xaac <Timer_Init>
	ADC_Init();
 8a8:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_Init>
	Lcd_Init();
 8ac:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <Lcd_Init>
	Lcd_Clear();
 8b0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Lcd_Clear>
	UART_Init();
 8b4:	0e 94 88 05 	call	0xb10	; 0xb10 <UART_Init>
	Start_Os();
 8b8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <Start_Os>
}
 8bc:	80 e0       	ldi	r24, 0x00	; 0
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	08 95       	ret

000008c2 <Relay_Handler>:
#include "Dio.h"
#include "Relay.h"

void Relay_Handler(uint8 level)
{
	if (level==HIGH)
 8c2:	81 30       	cpi	r24, 0x01	; 1
 8c4:	31 f4       	brne	.+12     	; 0x8d2 <Relay_Handler+0x10>
	{
		Dio_WritePin(PD,3,HIGH);
 8c6:	41 e0       	ldi	r20, 0x01	; 1
 8c8:	63 e0       	ldi	r22, 0x03	; 3
 8ca:	83 e0       	ldi	r24, 0x03	; 3
 8cc:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 8d0:	08 95       	ret
	}
	else
	{
		Dio_WritePin(PD,3,LOW);
 8d2:	40 e0       	ldi	r20, 0x00	; 0
 8d4:	63 e0       	ldi	r22, 0x03	; 3
 8d6:	83 e0       	ldi	r24, 0x03	; 3
 8d8:	0e 94 0d 01 	call	0x21a	; 0x21a <Dio_WritePin>
 8dc:	08 95       	ret

000008de <LCD_Display>:


uint8 Button_Flag = 0, Alarm_Flag = 0;

void LCD_Display(void)
{
 8de:	cf 93       	push	r28
	if (Alarm_Flag == 1 || Button_Flag == 1)
 8e0:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <Alarm_Flag>
 8e4:	81 30       	cpi	r24, 0x01	; 1
 8e6:	21 f0       	breq	.+8      	; 0x8f0 <LCD_Display+0x12>
 8e8:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <Button_Flag>
 8ec:	81 30       	cpi	r24, 0x01	; 1
 8ee:	39 f4       	brne	.+14     	; 0x8fe <LCD_Display+0x20>
	{
		Lcd_Clear();
 8f0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Lcd_Clear>
		Lcd_Write_String("FIRE ALARM !!");
 8f4:	80 e8       	ldi	r24, 0x80	; 128
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Lcd_Write_String>
 8fc:	29 c0       	rjmp	.+82     	; 0x950 <LCD_Display+0x72>
	}
	else
	{
		sint8 Temp_LCD = temp;
 8fe:	c0 91 d1 00 	lds	r28, 0x00D1	; 0x8000d1 <temp>
		
		Lcd_Clear();
 902:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Lcd_Clear>
		Lcd_Write_String("temp:");
 906:	8e e8       	ldi	r24, 0x8E	; 142
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Lcd_Write_String>
		
		if (Temp_LCD < 0)
 90e:	cc 23       	and	r28, r28
 910:	24 f4       	brge	.+8      	; 0x91a <LCD_Display+0x3c>
		{
			Lcd_Write_Char('-');
 912:	8d e2       	ldi	r24, 0x2D	; 45
 914:	0e 94 30 03 	call	0x660	; 0x660 <Lcd_Write_Char>
			Temp_LCD *= -1;
 918:	c1 95       	neg	r28
		}
		
		NUM_to_ASCII(Temp_LCD);
 91a:	8c 2f       	mov	r24, r28
 91c:	cc 0f       	add	r28, r28
 91e:	99 0b       	sbc	r25, r25
 920:	0e 94 85 03 	call	0x70a	; 0x70a <NUM_to_ASCII>
		Lcd_Write_String(ASCII);
 924:	8a ec       	ldi	r24, 0xCA	; 202
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Lcd_Write_String>
		
		Lcd_Set_Cursor(2, 0);
 92c:	60 e0       	ldi	r22, 0x00	; 0
 92e:	82 e0       	ldi	r24, 0x02	; 2
 930:	0e 94 de 02 	call	0x5bc	; 0x5bc <Lcd_Set_Cursor>
		
		NUM_to_ASCII(smoke);
 934:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <smoke>
 938:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <smoke+0x1>
 93c:	0e 94 85 03 	call	0x70a	; 0x70a <NUM_to_ASCII>
		Lcd_Write_String("smoke:");
 940:	84 e9       	ldi	r24, 0x94	; 148
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Lcd_Write_String>
		Lcd_Write_String(ASCII);
 948:	8a ec       	ldi	r24, 0xCA	; 202
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Lcd_Write_String>
	}
}
 950:	cf 91       	pop	r28
 952:	08 95       	ret

00000954 <Fire_Condition>:

void Fire_Condition(void)
{
	if ((temp >= 35) || (smoke >= 512))
 954:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <temp>
 958:	83 32       	cpi	r24, 0x23	; 35
 95a:	3c f4       	brge	.+14     	; 0x96a <Fire_Condition+0x16>
 95c:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <smoke>
 960:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <smoke+0x1>
 964:	81 15       	cp	r24, r1
 966:	92 40       	sbci	r25, 0x02	; 2
 968:	20 f0       	brcs	.+8      	; 0x972 <Fire_Condition+0x1e>
	{
		Alarm_Flag = 1;
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <Alarm_Flag>
 970:	02 c0       	rjmp	.+4      	; 0x976 <Fire_Condition+0x22>
	}
	else
	{
		Alarm_Flag = 0;
 972:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <Alarm_Flag>
	}
	
	if (Button_Read_actual(BUTTON0) == 1)
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Button_Read_actual>
 97c:	81 30       	cpi	r24, 0x01	; 1
 97e:	19 f4       	brne	.+6      	; 0x986 <Fire_Condition+0x32>
	{
		Button_Flag = 1;
 980:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <Button_Flag>
 984:	08 95       	ret
	}
	else if (Button_Read_actual(BUTTON1) == 1)
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Button_Read_actual>
 98c:	81 30       	cpi	r24, 0x01	; 1
 98e:	11 f4       	brne	.+4      	; 0x994 <Fire_Condition+0x40>
	{
		Button_Flag = 0;
 990:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <Button_Flag>
 994:	08 95       	ret

00000996 <Alarm_Init>:
	}
}

void Alarm_Init(void)
{
	if (Alarm_Flag == 1 || Button_Flag == 1)
 996:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <Alarm_Flag>
 99a:	81 30       	cpi	r24, 0x01	; 1
 99c:	21 f0       	breq	.+8      	; 0x9a6 <Alarm_Init+0x10>
 99e:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <Button_Flag>
 9a2:	81 30       	cpi	r24, 0x01	; 1
 9a4:	79 f4       	brne	.+30     	; 0x9c4 <Alarm_Init+0x2e>
	{
		Elec_Valve(HIGH);
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Elec_Valve>
		Led1_Toggle();
 9ac:	0e 94 11 04 	call	0x822	; 0x822 <Led1_Toggle>
		Led2_Toggle();
 9b0:	0e 94 26 04 	call	0x84c	; 0x84c <Led2_Toggle>
		Led3_Toggle();
 9b4:	0e 94 3b 04 	call	0x876	; 0x876 <Led3_Toggle>
		Buzzer_Toggle();
 9b8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Buzzer_Toggle>
		bluetooth('w');
 9bc:	87 e7       	ldi	r24, 0x77	; 119
 9be:	0e 94 9e 00 	call	0x13c	; 0x13c <bluetooth>
}

void Alarm_Init(void)
{
	if (Alarm_Flag == 1 || Button_Flag == 1)
	{
 9c2:	08 95       	ret
		Buzzer_Toggle();
		bluetooth('w');
	}
	else
	{
		Elec_Valve(LOW);
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Elec_Valve>
		Led_Handler(LED0, LOW);
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	80 e0       	ldi	r24, 0x00	; 0
 9ce:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <Led_Handler>
		Led_Handler(LED1, LOW);
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <Led_Handler>
		Led_Handler(LED2, LOW);
 9da:	60 e0       	ldi	r22, 0x00	; 0
 9dc:	82 e0       	ldi	r24, 0x02	; 2
 9de:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <Led_Handler>
		Buzzer_Handler(LOW);
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Buzzer_Handler>
 9e8:	08 95       	ret

000009ea <Start_Os>:
{
	uint8 i=0;
	uint32 tmp = 0;
	while(1)
	{
		if (1==Timer_Flag)
 9ea:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Timer_Flag>
 9ee:	81 30       	cpi	r24, 0x01	; 1
 9f0:	e1 f7       	brne	.-8      	; 0x9ea <Start_Os>
		{
			tmp = Timer_Counter;
 9f2:	c0 90 c5 00 	lds	r12, 0x00C5	; 0x8000c5 <Timer_Counter>
 9f6:	d0 90 c6 00 	lds	r13, 0x00C6	; 0x8000c6 <Timer_Counter+0x1>
 9fa:	e0 90 c7 00 	lds	r14, 0x00C7	; 0x8000c7 <Timer_Counter+0x2>
 9fe:	f0 90 c8 00 	lds	r15, 0x00C8	; 0x8000c8 <Timer_Counter+0x3>
			for (i=0;i<TASK_NUM;i++)
 a02:	c0 e0       	ldi	r28, 0x00	; 0
 a04:	23 c0       	rjmp	.+70     	; 0xa4c <Start_Os+0x62>
			{
				if (0== (tmp % Os_Cfg[i].Periodity))
 a06:	0c 2f       	mov	r16, r28
 a08:	10 e0       	ldi	r17, 0x00	; 0
 a0a:	f8 01       	movw	r30, r16
 a0c:	ee 0f       	add	r30, r30
 a0e:	ff 1f       	adc	r31, r31
 a10:	ee 0f       	add	r30, r30
 a12:	ff 1f       	adc	r31, r31
 a14:	e5 56       	subi	r30, 0x65	; 101
 a16:	ff 4f       	sbci	r31, 0xFF	; 255
 a18:	20 81       	ld	r18, Z
 a1a:	31 81       	ldd	r19, Z+1	; 0x01
 a1c:	40 e0       	ldi	r20, 0x00	; 0
 a1e:	50 e0       	ldi	r21, 0x00	; 0
 a20:	c7 01       	movw	r24, r14
 a22:	b6 01       	movw	r22, r12
 a24:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__udivmodsi4>
 a28:	67 2b       	or	r22, r23
 a2a:	68 2b       	or	r22, r24
 a2c:	69 2b       	or	r22, r25
 a2e:	59 f4       	brne	.+22     	; 0xa46 <Start_Os+0x5c>
				{
					Os_Cfg[i].ptr_f();
 a30:	00 0f       	add	r16, r16
 a32:	11 1f       	adc	r17, r17
 a34:	00 0f       	add	r16, r16
 a36:	11 1f       	adc	r17, r17
 a38:	f8 01       	movw	r30, r16
 a3a:	e5 56       	subi	r30, 0x65	; 101
 a3c:	ff 4f       	sbci	r31, 0xFF	; 255
 a3e:	02 80       	ldd	r0, Z+2	; 0x02
 a40:	f3 81       	ldd	r31, Z+3	; 0x03
 a42:	e0 2d       	mov	r30, r0
 a44:	09 95       	icall
				}
				Timer_Flag=0;
 a46:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <Timer_Flag>
	while(1)
	{
		if (1==Timer_Flag)
		{
			tmp = Timer_Counter;
			for (i=0;i<TASK_NUM;i++)
 a4a:	cf 5f       	subi	r28, 0xFF	; 255
 a4c:	c7 30       	cpi	r28, 0x07	; 7
 a4e:	d8 f2       	brcs	.-74     	; 0xa06 <Start_Os+0x1c>
 a50:	cc cf       	rjmp	.-104    	; 0x9ea <Start_Os>

00000a52 <Smoke_Sensor>:

uint16 smoke;

void Smoke_Sensor(void)
{
	smoke = ADC_Conversion(ADC0);
 a52:	80 e0       	ldi	r24, 0x00	; 0
 a54:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Conversion>
 a58:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <smoke+0x1>
 a5c:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <smoke>
 a60:	08 95       	ret

00000a62 <Temp_Sensor>:

sint8 temp;

void Temp_Sensor(void)
{
	temp = ((ADC_Conversion(ADC1)/12.89*1000) - 40000)/1000;
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	0e 94 5d 00 	call	0xba	; 0xba <ADC_Conversion>
 a68:	bc 01       	movw	r22, r24
 a6a:	80 e0       	ldi	r24, 0x00	; 0
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	0e 94 ab 06 	call	0xd56	; 0xd56 <__floatunsisf>
 a72:	21 e7       	ldi	r18, 0x71	; 113
 a74:	3d e3       	ldi	r19, 0x3D	; 61
 a76:	4e e4       	ldi	r20, 0x4E	; 78
 a78:	51 e4       	ldi	r21, 0x41	; 65
 a7a:	0e 94 03 06 	call	0xc06	; 0xc06 <__divsf3>
 a7e:	20 e0       	ldi	r18, 0x00	; 0
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	4a e7       	ldi	r20, 0x7A	; 122
 a84:	54 e4       	ldi	r21, 0x44	; 68
 a86:	0e 94 39 07 	call	0xe72	; 0xe72 <__mulsf3>
 a8a:	20 e0       	ldi	r18, 0x00	; 0
 a8c:	30 e4       	ldi	r19, 0x40	; 64
 a8e:	4c e1       	ldi	r20, 0x1C	; 28
 a90:	57 e4       	ldi	r21, 0x47	; 71
 a92:	0e 94 96 05 	call	0xb2c	; 0xb2c <__subsf3>
 a96:	20 e0       	ldi	r18, 0x00	; 0
 a98:	30 e0       	ldi	r19, 0x00	; 0
 a9a:	4a e7       	ldi	r20, 0x7A	; 122
 a9c:	54 e4       	ldi	r21, 0x44	; 68
 a9e:	0e 94 03 06 	call	0xc06	; 0xc06 <__divsf3>
 aa2:	0e 94 75 06 	call	0xcea	; 0xcea <__fixsfsi>
 aa6:	60 93 d1 00 	sts	0x00D1, r22	; 0x8000d1 <temp>
 aaa:	08 95       	ret

00000aac <Timer_Init>:
volatile uint8 Timer_Flag=0;
volatile uint32 Timer_Counter=0;

void Timer_Init(void)
{
	TCCR1B=(1<<WGM12)|(1<<CS10);
 aac:	89 e0       	ldi	r24, 0x09	; 9
 aae:	8e bd       	out	0x2e, r24	; 46
	OCR1A=11999;
 ab0:	8f ed       	ldi	r24, 0xDF	; 223
 ab2:	9e e2       	ldi	r25, 0x2E	; 46
 ab4:	9b bd       	out	0x2b, r25	; 43
 ab6:	8a bd       	out	0x2a, r24	; 42
	TIMSK=(1<<OCIE1A);
 ab8:	80 e1       	ldi	r24, 0x10	; 16
 aba:	89 bf       	out	0x39, r24	; 57
	sei();
 abc:	78 94       	sei
 abe:	08 95       	ret

00000ac0 <__vector_7>:
}
	
ISR(TIMER1_COMPA_vect)
	{
 ac0:	1f 92       	push	r1
 ac2:	0f 92       	push	r0
 ac4:	0f b6       	in	r0, 0x3f	; 63
 ac6:	0f 92       	push	r0
 ac8:	11 24       	eor	r1, r1
 aca:	8f 93       	push	r24
 acc:	9f 93       	push	r25
 ace:	af 93       	push	r26
 ad0:	bf 93       	push	r27
		Timer_Counter++;
 ad2:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <Timer_Counter>
 ad6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <Timer_Counter+0x1>
 ada:	a0 91 c7 00 	lds	r26, 0x00C7	; 0x8000c7 <Timer_Counter+0x2>
 ade:	b0 91 c8 00 	lds	r27, 0x00C8	; 0x8000c8 <Timer_Counter+0x3>
 ae2:	01 96       	adiw	r24, 0x01	; 1
 ae4:	a1 1d       	adc	r26, r1
 ae6:	b1 1d       	adc	r27, r1
 ae8:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <Timer_Counter>
 aec:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <Timer_Counter+0x1>
 af0:	a0 93 c7 00 	sts	0x00C7, r26	; 0x8000c7 <Timer_Counter+0x2>
 af4:	b0 93 c8 00 	sts	0x00C8, r27	; 0x8000c8 <Timer_Counter+0x3>
		Timer_Flag=1;
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <Timer_Flag>
		
		
 afe:	bf 91       	pop	r27
 b00:	af 91       	pop	r26
 b02:	9f 91       	pop	r25
 b04:	8f 91       	pop	r24
 b06:	0f 90       	pop	r0
 b08:	0f be       	out	0x3f, r0	; 63
 b0a:	0f 90       	pop	r0
 b0c:	1f 90       	pop	r1
 b0e:	18 95       	reti

00000b10 <UART_Init>:
#include "UART.h"
#include <avr/io.h>

void UART_Init(void)
{
	UBRRH=(77>>8);
 b10:	10 bc       	out	0x20, r1	; 32
	UBRRL=77;
 b12:	8d e4       	ldi	r24, 0x4D	; 77
 b14:	89 b9       	out	0x09, r24	; 9
	UCSRB|=(1<<RXEN)|(1<<TXEN);
 b16:	8a b1       	in	r24, 0x0a	; 10
 b18:	88 61       	ori	r24, 0x18	; 24
 b1a:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 b1c:	80 b5       	in	r24, 0x20	; 32
 b1e:	86 68       	ori	r24, 0x86	; 134
 b20:	80 bd       	out	0x20, r24	; 32
 b22:	08 95       	ret

00000b24 <UART_Send_data>:
	
}

void UART_Send_data(uint8 data)
{
	 while (!( UCSRA & (1<<UDRE)));                
 b24:	5d 9b       	sbis	0x0b, 5	; 11
 b26:	fe cf       	rjmp	.-4      	; 0xb24 <UART_Send_data>
	 UDR = data;
 b28:	8c b9       	out	0x0c, r24	; 12
 b2a:	08 95       	ret

00000b2c <__subsf3>:
 b2c:	50 58       	subi	r21, 0x80	; 128

00000b2e <__addsf3>:
 b2e:	bb 27       	eor	r27, r27
 b30:	aa 27       	eor	r26, r26
 b32:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__addsf3x>
 b36:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_round>
 b3a:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_pscA>
 b3e:	38 f0       	brcs	.+14     	; 0xb4e <__addsf3+0x20>
 b40:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_pscB>
 b44:	20 f0       	brcs	.+8      	; 0xb4e <__addsf3+0x20>
 b46:	39 f4       	brne	.+14     	; 0xb56 <__addsf3+0x28>
 b48:	9f 3f       	cpi	r25, 0xFF	; 255
 b4a:	19 f4       	brne	.+6      	; 0xb52 <__addsf3+0x24>
 b4c:	26 f4       	brtc	.+8      	; 0xb56 <__addsf3+0x28>
 b4e:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>
 b52:	0e f4       	brtc	.+2      	; 0xb56 <__addsf3+0x28>
 b54:	e0 95       	com	r30
 b56:	e7 fb       	bst	r30, 7
 b58:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>

00000b5c <__addsf3x>:
 b5c:	e9 2f       	mov	r30, r25
 b5e:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_split3>
 b62:	58 f3       	brcs	.-42     	; 0xb3a <__addsf3+0xc>
 b64:	ba 17       	cp	r27, r26
 b66:	62 07       	cpc	r22, r18
 b68:	73 07       	cpc	r23, r19
 b6a:	84 07       	cpc	r24, r20
 b6c:	95 07       	cpc	r25, r21
 b6e:	20 f0       	brcs	.+8      	; 0xb78 <__addsf3x+0x1c>
 b70:	79 f4       	brne	.+30     	; 0xb90 <__addsf3x+0x34>
 b72:	a6 f5       	brtc	.+104    	; 0xbdc <__addsf3x+0x80>
 b74:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_zero>
 b78:	0e f4       	brtc	.+2      	; 0xb7c <__addsf3x+0x20>
 b7a:	e0 95       	com	r30
 b7c:	0b 2e       	mov	r0, r27
 b7e:	ba 2f       	mov	r27, r26
 b80:	a0 2d       	mov	r26, r0
 b82:	0b 01       	movw	r0, r22
 b84:	b9 01       	movw	r22, r18
 b86:	90 01       	movw	r18, r0
 b88:	0c 01       	movw	r0, r24
 b8a:	ca 01       	movw	r24, r20
 b8c:	a0 01       	movw	r20, r0
 b8e:	11 24       	eor	r1, r1
 b90:	ff 27       	eor	r31, r31
 b92:	59 1b       	sub	r21, r25
 b94:	99 f0       	breq	.+38     	; 0xbbc <__addsf3x+0x60>
 b96:	59 3f       	cpi	r21, 0xF9	; 249
 b98:	50 f4       	brcc	.+20     	; 0xbae <__addsf3x+0x52>
 b9a:	50 3e       	cpi	r21, 0xE0	; 224
 b9c:	68 f1       	brcs	.+90     	; 0xbf8 <__addsf3x+0x9c>
 b9e:	1a 16       	cp	r1, r26
 ba0:	f0 40       	sbci	r31, 0x00	; 0
 ba2:	a2 2f       	mov	r26, r18
 ba4:	23 2f       	mov	r18, r19
 ba6:	34 2f       	mov	r19, r20
 ba8:	44 27       	eor	r20, r20
 baa:	58 5f       	subi	r21, 0xF8	; 248
 bac:	f3 cf       	rjmp	.-26     	; 0xb94 <__addsf3x+0x38>
 bae:	46 95       	lsr	r20
 bb0:	37 95       	ror	r19
 bb2:	27 95       	ror	r18
 bb4:	a7 95       	ror	r26
 bb6:	f0 40       	sbci	r31, 0x00	; 0
 bb8:	53 95       	inc	r21
 bba:	c9 f7       	brne	.-14     	; 0xbae <__addsf3x+0x52>
 bbc:	7e f4       	brtc	.+30     	; 0xbdc <__addsf3x+0x80>
 bbe:	1f 16       	cp	r1, r31
 bc0:	ba 0b       	sbc	r27, r26
 bc2:	62 0b       	sbc	r22, r18
 bc4:	73 0b       	sbc	r23, r19
 bc6:	84 0b       	sbc	r24, r20
 bc8:	ba f0       	brmi	.+46     	; 0xbf8 <__addsf3x+0x9c>
 bca:	91 50       	subi	r25, 0x01	; 1
 bcc:	a1 f0       	breq	.+40     	; 0xbf6 <__addsf3x+0x9a>
 bce:	ff 0f       	add	r31, r31
 bd0:	bb 1f       	adc	r27, r27
 bd2:	66 1f       	adc	r22, r22
 bd4:	77 1f       	adc	r23, r23
 bd6:	88 1f       	adc	r24, r24
 bd8:	c2 f7       	brpl	.-16     	; 0xbca <__addsf3x+0x6e>
 bda:	0e c0       	rjmp	.+28     	; 0xbf8 <__addsf3x+0x9c>
 bdc:	ba 0f       	add	r27, r26
 bde:	62 1f       	adc	r22, r18
 be0:	73 1f       	adc	r23, r19
 be2:	84 1f       	adc	r24, r20
 be4:	48 f4       	brcc	.+18     	; 0xbf8 <__addsf3x+0x9c>
 be6:	87 95       	ror	r24
 be8:	77 95       	ror	r23
 bea:	67 95       	ror	r22
 bec:	b7 95       	ror	r27
 bee:	f7 95       	ror	r31
 bf0:	9e 3f       	cpi	r25, 0xFE	; 254
 bf2:	08 f0       	brcs	.+2      	; 0xbf6 <__addsf3x+0x9a>
 bf4:	b0 cf       	rjmp	.-160    	; 0xb56 <__addsf3+0x28>
 bf6:	93 95       	inc	r25
 bf8:	88 0f       	add	r24, r24
 bfa:	08 f0       	brcs	.+2      	; 0xbfe <__addsf3x+0xa2>
 bfc:	99 27       	eor	r25, r25
 bfe:	ee 0f       	add	r30, r30
 c00:	97 95       	ror	r25
 c02:	87 95       	ror	r24
 c04:	08 95       	ret

00000c06 <__divsf3>:
 c06:	0e 94 17 06 	call	0xc2e	; 0xc2e <__divsf3x>
 c0a:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_round>
 c0e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_pscB>
 c12:	58 f0       	brcs	.+22     	; 0xc2a <__divsf3+0x24>
 c14:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_pscA>
 c18:	40 f0       	brcs	.+16     	; 0xc2a <__divsf3+0x24>
 c1a:	29 f4       	brne	.+10     	; 0xc26 <__divsf3+0x20>
 c1c:	5f 3f       	cpi	r21, 0xFF	; 255
 c1e:	29 f0       	breq	.+10     	; 0xc2a <__divsf3+0x24>
 c20:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
 c24:	51 11       	cpse	r21, r1
 c26:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_szero>
 c2a:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>

00000c2e <__divsf3x>:
 c2e:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_split3>
 c32:	68 f3       	brcs	.-38     	; 0xc0e <__divsf3+0x8>

00000c34 <__divsf3_pse>:
 c34:	99 23       	and	r25, r25
 c36:	b1 f3       	breq	.-20     	; 0xc24 <__divsf3+0x1e>
 c38:	55 23       	and	r21, r21
 c3a:	91 f3       	breq	.-28     	; 0xc20 <__divsf3+0x1a>
 c3c:	95 1b       	sub	r25, r21
 c3e:	55 0b       	sbc	r21, r21
 c40:	bb 27       	eor	r27, r27
 c42:	aa 27       	eor	r26, r26
 c44:	62 17       	cp	r22, r18
 c46:	73 07       	cpc	r23, r19
 c48:	84 07       	cpc	r24, r20
 c4a:	38 f0       	brcs	.+14     	; 0xc5a <__divsf3_pse+0x26>
 c4c:	9f 5f       	subi	r25, 0xFF	; 255
 c4e:	5f 4f       	sbci	r21, 0xFF	; 255
 c50:	22 0f       	add	r18, r18
 c52:	33 1f       	adc	r19, r19
 c54:	44 1f       	adc	r20, r20
 c56:	aa 1f       	adc	r26, r26
 c58:	a9 f3       	breq	.-22     	; 0xc44 <__divsf3_pse+0x10>
 c5a:	35 d0       	rcall	.+106    	; 0xcc6 <__divsf3_pse+0x92>
 c5c:	0e 2e       	mov	r0, r30
 c5e:	3a f0       	brmi	.+14     	; 0xc6e <__divsf3_pse+0x3a>
 c60:	e0 e8       	ldi	r30, 0x80	; 128
 c62:	32 d0       	rcall	.+100    	; 0xcc8 <__divsf3_pse+0x94>
 c64:	91 50       	subi	r25, 0x01	; 1
 c66:	50 40       	sbci	r21, 0x00	; 0
 c68:	e6 95       	lsr	r30
 c6a:	00 1c       	adc	r0, r0
 c6c:	ca f7       	brpl	.-14     	; 0xc60 <__divsf3_pse+0x2c>
 c6e:	2b d0       	rcall	.+86     	; 0xcc6 <__divsf3_pse+0x92>
 c70:	fe 2f       	mov	r31, r30
 c72:	29 d0       	rcall	.+82     	; 0xcc6 <__divsf3_pse+0x92>
 c74:	66 0f       	add	r22, r22
 c76:	77 1f       	adc	r23, r23
 c78:	88 1f       	adc	r24, r24
 c7a:	bb 1f       	adc	r27, r27
 c7c:	26 17       	cp	r18, r22
 c7e:	37 07       	cpc	r19, r23
 c80:	48 07       	cpc	r20, r24
 c82:	ab 07       	cpc	r26, r27
 c84:	b0 e8       	ldi	r27, 0x80	; 128
 c86:	09 f0       	breq	.+2      	; 0xc8a <__divsf3_pse+0x56>
 c88:	bb 0b       	sbc	r27, r27
 c8a:	80 2d       	mov	r24, r0
 c8c:	bf 01       	movw	r22, r30
 c8e:	ff 27       	eor	r31, r31
 c90:	93 58       	subi	r25, 0x83	; 131
 c92:	5f 4f       	sbci	r21, 0xFF	; 255
 c94:	3a f0       	brmi	.+14     	; 0xca4 <__divsf3_pse+0x70>
 c96:	9e 3f       	cpi	r25, 0xFE	; 254
 c98:	51 05       	cpc	r21, r1
 c9a:	78 f0       	brcs	.+30     	; 0xcba <__divsf3_pse+0x86>
 c9c:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
 ca0:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_szero>
 ca4:	5f 3f       	cpi	r21, 0xFF	; 255
 ca6:	e4 f3       	brlt	.-8      	; 0xca0 <__divsf3_pse+0x6c>
 ca8:	98 3e       	cpi	r25, 0xE8	; 232
 caa:	d4 f3       	brlt	.-12     	; 0xca0 <__divsf3_pse+0x6c>
 cac:	86 95       	lsr	r24
 cae:	77 95       	ror	r23
 cb0:	67 95       	ror	r22
 cb2:	b7 95       	ror	r27
 cb4:	f7 95       	ror	r31
 cb6:	9f 5f       	subi	r25, 0xFF	; 255
 cb8:	c9 f7       	brne	.-14     	; 0xcac <__divsf3_pse+0x78>
 cba:	88 0f       	add	r24, r24
 cbc:	91 1d       	adc	r25, r1
 cbe:	96 95       	lsr	r25
 cc0:	87 95       	ror	r24
 cc2:	97 f9       	bld	r25, 7
 cc4:	08 95       	ret
 cc6:	e1 e0       	ldi	r30, 0x01	; 1
 cc8:	66 0f       	add	r22, r22
 cca:	77 1f       	adc	r23, r23
 ccc:	88 1f       	adc	r24, r24
 cce:	bb 1f       	adc	r27, r27
 cd0:	62 17       	cp	r22, r18
 cd2:	73 07       	cpc	r23, r19
 cd4:	84 07       	cpc	r24, r20
 cd6:	ba 07       	cpc	r27, r26
 cd8:	20 f0       	brcs	.+8      	; 0xce2 <__divsf3_pse+0xae>
 cda:	62 1b       	sub	r22, r18
 cdc:	73 0b       	sbc	r23, r19
 cde:	84 0b       	sbc	r24, r20
 ce0:	ba 0b       	sbc	r27, r26
 ce2:	ee 1f       	adc	r30, r30
 ce4:	88 f7       	brcc	.-30     	; 0xcc8 <__divsf3_pse+0x94>
 ce6:	e0 95       	com	r30
 ce8:	08 95       	ret

00000cea <__fixsfsi>:
 cea:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 cee:	68 94       	set
 cf0:	b1 11       	cpse	r27, r1
 cf2:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_szero>
 cf6:	08 95       	ret

00000cf8 <__fixunssfsi>:
 cf8:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_splitA>
 cfc:	88 f0       	brcs	.+34     	; 0xd20 <__fixunssfsi+0x28>
 cfe:	9f 57       	subi	r25, 0x7F	; 127
 d00:	98 f0       	brcs	.+38     	; 0xd28 <__fixunssfsi+0x30>
 d02:	b9 2f       	mov	r27, r25
 d04:	99 27       	eor	r25, r25
 d06:	b7 51       	subi	r27, 0x17	; 23
 d08:	b0 f0       	brcs	.+44     	; 0xd36 <__fixunssfsi+0x3e>
 d0a:	e1 f0       	breq	.+56     	; 0xd44 <__fixunssfsi+0x4c>
 d0c:	66 0f       	add	r22, r22
 d0e:	77 1f       	adc	r23, r23
 d10:	88 1f       	adc	r24, r24
 d12:	99 1f       	adc	r25, r25
 d14:	1a f0       	brmi	.+6      	; 0xd1c <__fixunssfsi+0x24>
 d16:	ba 95       	dec	r27
 d18:	c9 f7       	brne	.-14     	; 0xd0c <__fixunssfsi+0x14>
 d1a:	14 c0       	rjmp	.+40     	; 0xd44 <__fixunssfsi+0x4c>
 d1c:	b1 30       	cpi	r27, 0x01	; 1
 d1e:	91 f0       	breq	.+36     	; 0xd44 <__fixunssfsi+0x4c>
 d20:	0e 94 32 07 	call	0xe64	; 0xe64 <__fp_zero>
 d24:	b1 e0       	ldi	r27, 0x01	; 1
 d26:	08 95       	ret
 d28:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_zero>
 d2c:	67 2f       	mov	r22, r23
 d2e:	78 2f       	mov	r23, r24
 d30:	88 27       	eor	r24, r24
 d32:	b8 5f       	subi	r27, 0xF8	; 248
 d34:	39 f0       	breq	.+14     	; 0xd44 <__fixunssfsi+0x4c>
 d36:	b9 3f       	cpi	r27, 0xF9	; 249
 d38:	cc f3       	brlt	.-14     	; 0xd2c <__fixunssfsi+0x34>
 d3a:	86 95       	lsr	r24
 d3c:	77 95       	ror	r23
 d3e:	67 95       	ror	r22
 d40:	b3 95       	inc	r27
 d42:	d9 f7       	brne	.-10     	; 0xd3a <__fixunssfsi+0x42>
 d44:	3e f4       	brtc	.+14     	; 0xd54 <__fixunssfsi+0x5c>
 d46:	90 95       	com	r25
 d48:	80 95       	com	r24
 d4a:	70 95       	com	r23
 d4c:	61 95       	neg	r22
 d4e:	7f 4f       	sbci	r23, 0xFF	; 255
 d50:	8f 4f       	sbci	r24, 0xFF	; 255
 d52:	9f 4f       	sbci	r25, 0xFF	; 255
 d54:	08 95       	ret

00000d56 <__floatunsisf>:
 d56:	e8 94       	clt
 d58:	09 c0       	rjmp	.+18     	; 0xd6c <__floatsisf+0x12>

00000d5a <__floatsisf>:
 d5a:	97 fb       	bst	r25, 7
 d5c:	3e f4       	brtc	.+14     	; 0xd6c <__floatsisf+0x12>
 d5e:	90 95       	com	r25
 d60:	80 95       	com	r24
 d62:	70 95       	com	r23
 d64:	61 95       	neg	r22
 d66:	7f 4f       	sbci	r23, 0xFF	; 255
 d68:	8f 4f       	sbci	r24, 0xFF	; 255
 d6a:	9f 4f       	sbci	r25, 0xFF	; 255
 d6c:	99 23       	and	r25, r25
 d6e:	a9 f0       	breq	.+42     	; 0xd9a <__floatsisf+0x40>
 d70:	f9 2f       	mov	r31, r25
 d72:	96 e9       	ldi	r25, 0x96	; 150
 d74:	bb 27       	eor	r27, r27
 d76:	93 95       	inc	r25
 d78:	f6 95       	lsr	r31
 d7a:	87 95       	ror	r24
 d7c:	77 95       	ror	r23
 d7e:	67 95       	ror	r22
 d80:	b7 95       	ror	r27
 d82:	f1 11       	cpse	r31, r1
 d84:	f8 cf       	rjmp	.-16     	; 0xd76 <__floatsisf+0x1c>
 d86:	fa f4       	brpl	.+62     	; 0xdc6 <__floatsisf+0x6c>
 d88:	bb 0f       	add	r27, r27
 d8a:	11 f4       	brne	.+4      	; 0xd90 <__floatsisf+0x36>
 d8c:	60 ff       	sbrs	r22, 0
 d8e:	1b c0       	rjmp	.+54     	; 0xdc6 <__floatsisf+0x6c>
 d90:	6f 5f       	subi	r22, 0xFF	; 255
 d92:	7f 4f       	sbci	r23, 0xFF	; 255
 d94:	8f 4f       	sbci	r24, 0xFF	; 255
 d96:	9f 4f       	sbci	r25, 0xFF	; 255
 d98:	16 c0       	rjmp	.+44     	; 0xdc6 <__floatsisf+0x6c>
 d9a:	88 23       	and	r24, r24
 d9c:	11 f0       	breq	.+4      	; 0xda2 <__floatsisf+0x48>
 d9e:	96 e9       	ldi	r25, 0x96	; 150
 da0:	11 c0       	rjmp	.+34     	; 0xdc4 <__floatsisf+0x6a>
 da2:	77 23       	and	r23, r23
 da4:	21 f0       	breq	.+8      	; 0xdae <__floatsisf+0x54>
 da6:	9e e8       	ldi	r25, 0x8E	; 142
 da8:	87 2f       	mov	r24, r23
 daa:	76 2f       	mov	r23, r22
 dac:	05 c0       	rjmp	.+10     	; 0xdb8 <__floatsisf+0x5e>
 dae:	66 23       	and	r22, r22
 db0:	71 f0       	breq	.+28     	; 0xdce <__floatsisf+0x74>
 db2:	96 e8       	ldi	r25, 0x86	; 134
 db4:	86 2f       	mov	r24, r22
 db6:	70 e0       	ldi	r23, 0x00	; 0
 db8:	60 e0       	ldi	r22, 0x00	; 0
 dba:	2a f0       	brmi	.+10     	; 0xdc6 <__floatsisf+0x6c>
 dbc:	9a 95       	dec	r25
 dbe:	66 0f       	add	r22, r22
 dc0:	77 1f       	adc	r23, r23
 dc2:	88 1f       	adc	r24, r24
 dc4:	da f7       	brpl	.-10     	; 0xdbc <__floatsisf+0x62>
 dc6:	88 0f       	add	r24, r24
 dc8:	96 95       	lsr	r25
 dca:	87 95       	ror	r24
 dcc:	97 f9       	bld	r25, 7
 dce:	08 95       	ret

00000dd0 <__fp_inf>:
 dd0:	97 f9       	bld	r25, 7
 dd2:	9f 67       	ori	r25, 0x7F	; 127
 dd4:	80 e8       	ldi	r24, 0x80	; 128
 dd6:	70 e0       	ldi	r23, 0x00	; 0
 dd8:	60 e0       	ldi	r22, 0x00	; 0
 dda:	08 95       	ret

00000ddc <__fp_nan>:
 ddc:	9f ef       	ldi	r25, 0xFF	; 255
 dde:	80 ec       	ldi	r24, 0xC0	; 192
 de0:	08 95       	ret

00000de2 <__fp_pscA>:
 de2:	00 24       	eor	r0, r0
 de4:	0a 94       	dec	r0
 de6:	16 16       	cp	r1, r22
 de8:	17 06       	cpc	r1, r23
 dea:	18 06       	cpc	r1, r24
 dec:	09 06       	cpc	r0, r25
 dee:	08 95       	ret

00000df0 <__fp_pscB>:
 df0:	00 24       	eor	r0, r0
 df2:	0a 94       	dec	r0
 df4:	12 16       	cp	r1, r18
 df6:	13 06       	cpc	r1, r19
 df8:	14 06       	cpc	r1, r20
 dfa:	05 06       	cpc	r0, r21
 dfc:	08 95       	ret

00000dfe <__fp_round>:
 dfe:	09 2e       	mov	r0, r25
 e00:	03 94       	inc	r0
 e02:	00 0c       	add	r0, r0
 e04:	11 f4       	brne	.+4      	; 0xe0a <__fp_round+0xc>
 e06:	88 23       	and	r24, r24
 e08:	52 f0       	brmi	.+20     	; 0xe1e <__fp_round+0x20>
 e0a:	bb 0f       	add	r27, r27
 e0c:	40 f4       	brcc	.+16     	; 0xe1e <__fp_round+0x20>
 e0e:	bf 2b       	or	r27, r31
 e10:	11 f4       	brne	.+4      	; 0xe16 <__fp_round+0x18>
 e12:	60 ff       	sbrs	r22, 0
 e14:	04 c0       	rjmp	.+8      	; 0xe1e <__fp_round+0x20>
 e16:	6f 5f       	subi	r22, 0xFF	; 255
 e18:	7f 4f       	sbci	r23, 0xFF	; 255
 e1a:	8f 4f       	sbci	r24, 0xFF	; 255
 e1c:	9f 4f       	sbci	r25, 0xFF	; 255
 e1e:	08 95       	ret

00000e20 <__fp_split3>:
 e20:	57 fd       	sbrc	r21, 7
 e22:	90 58       	subi	r25, 0x80	; 128
 e24:	44 0f       	add	r20, r20
 e26:	55 1f       	adc	r21, r21
 e28:	59 f0       	breq	.+22     	; 0xe40 <__fp_splitA+0x10>
 e2a:	5f 3f       	cpi	r21, 0xFF	; 255
 e2c:	71 f0       	breq	.+28     	; 0xe4a <__fp_splitA+0x1a>
 e2e:	47 95       	ror	r20

00000e30 <__fp_splitA>:
 e30:	88 0f       	add	r24, r24
 e32:	97 fb       	bst	r25, 7
 e34:	99 1f       	adc	r25, r25
 e36:	61 f0       	breq	.+24     	; 0xe50 <__fp_splitA+0x20>
 e38:	9f 3f       	cpi	r25, 0xFF	; 255
 e3a:	79 f0       	breq	.+30     	; 0xe5a <__fp_splitA+0x2a>
 e3c:	87 95       	ror	r24
 e3e:	08 95       	ret
 e40:	12 16       	cp	r1, r18
 e42:	13 06       	cpc	r1, r19
 e44:	14 06       	cpc	r1, r20
 e46:	55 1f       	adc	r21, r21
 e48:	f2 cf       	rjmp	.-28     	; 0xe2e <__fp_split3+0xe>
 e4a:	46 95       	lsr	r20
 e4c:	f1 df       	rcall	.-30     	; 0xe30 <__fp_splitA>
 e4e:	08 c0       	rjmp	.+16     	; 0xe60 <__fp_splitA+0x30>
 e50:	16 16       	cp	r1, r22
 e52:	17 06       	cpc	r1, r23
 e54:	18 06       	cpc	r1, r24
 e56:	99 1f       	adc	r25, r25
 e58:	f1 cf       	rjmp	.-30     	; 0xe3c <__fp_splitA+0xc>
 e5a:	86 95       	lsr	r24
 e5c:	71 05       	cpc	r23, r1
 e5e:	61 05       	cpc	r22, r1
 e60:	08 94       	sec
 e62:	08 95       	ret

00000e64 <__fp_zero>:
 e64:	e8 94       	clt

00000e66 <__fp_szero>:
 e66:	bb 27       	eor	r27, r27
 e68:	66 27       	eor	r22, r22
 e6a:	77 27       	eor	r23, r23
 e6c:	cb 01       	movw	r24, r22
 e6e:	97 f9       	bld	r25, 7
 e70:	08 95       	ret

00000e72 <__mulsf3>:
 e72:	0e 94 4c 07 	call	0xe98	; 0xe98 <__mulsf3x>
 e76:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_round>
 e7a:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_pscA>
 e7e:	38 f0       	brcs	.+14     	; 0xe8e <__mulsf3+0x1c>
 e80:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_pscB>
 e84:	20 f0       	brcs	.+8      	; 0xe8e <__mulsf3+0x1c>
 e86:	95 23       	and	r25, r21
 e88:	11 f0       	breq	.+4      	; 0xe8e <__mulsf3+0x1c>
 e8a:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
 e8e:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>
 e92:	11 24       	eor	r1, r1
 e94:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_szero>

00000e98 <__mulsf3x>:
 e98:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_split3>
 e9c:	70 f3       	brcs	.-36     	; 0xe7a <__mulsf3+0x8>

00000e9e <__mulsf3_pse>:
 e9e:	95 9f       	mul	r25, r21
 ea0:	c1 f3       	breq	.-16     	; 0xe92 <__mulsf3+0x20>
 ea2:	95 0f       	add	r25, r21
 ea4:	50 e0       	ldi	r21, 0x00	; 0
 ea6:	55 1f       	adc	r21, r21
 ea8:	62 9f       	mul	r22, r18
 eaa:	f0 01       	movw	r30, r0
 eac:	72 9f       	mul	r23, r18
 eae:	bb 27       	eor	r27, r27
 eb0:	f0 0d       	add	r31, r0
 eb2:	b1 1d       	adc	r27, r1
 eb4:	63 9f       	mul	r22, r19
 eb6:	aa 27       	eor	r26, r26
 eb8:	f0 0d       	add	r31, r0
 eba:	b1 1d       	adc	r27, r1
 ebc:	aa 1f       	adc	r26, r26
 ebe:	64 9f       	mul	r22, r20
 ec0:	66 27       	eor	r22, r22
 ec2:	b0 0d       	add	r27, r0
 ec4:	a1 1d       	adc	r26, r1
 ec6:	66 1f       	adc	r22, r22
 ec8:	82 9f       	mul	r24, r18
 eca:	22 27       	eor	r18, r18
 ecc:	b0 0d       	add	r27, r0
 ece:	a1 1d       	adc	r26, r1
 ed0:	62 1f       	adc	r22, r18
 ed2:	73 9f       	mul	r23, r19
 ed4:	b0 0d       	add	r27, r0
 ed6:	a1 1d       	adc	r26, r1
 ed8:	62 1f       	adc	r22, r18
 eda:	83 9f       	mul	r24, r19
 edc:	a0 0d       	add	r26, r0
 ede:	61 1d       	adc	r22, r1
 ee0:	22 1f       	adc	r18, r18
 ee2:	74 9f       	mul	r23, r20
 ee4:	33 27       	eor	r19, r19
 ee6:	a0 0d       	add	r26, r0
 ee8:	61 1d       	adc	r22, r1
 eea:	23 1f       	adc	r18, r19
 eec:	84 9f       	mul	r24, r20
 eee:	60 0d       	add	r22, r0
 ef0:	21 1d       	adc	r18, r1
 ef2:	82 2f       	mov	r24, r18
 ef4:	76 2f       	mov	r23, r22
 ef6:	6a 2f       	mov	r22, r26
 ef8:	11 24       	eor	r1, r1
 efa:	9f 57       	subi	r25, 0x7F	; 127
 efc:	50 40       	sbci	r21, 0x00	; 0
 efe:	9a f0       	brmi	.+38     	; 0xf26 <__mulsf3_pse+0x88>
 f00:	f1 f0       	breq	.+60     	; 0xf3e <__mulsf3_pse+0xa0>
 f02:	88 23       	and	r24, r24
 f04:	4a f0       	brmi	.+18     	; 0xf18 <__mulsf3_pse+0x7a>
 f06:	ee 0f       	add	r30, r30
 f08:	ff 1f       	adc	r31, r31
 f0a:	bb 1f       	adc	r27, r27
 f0c:	66 1f       	adc	r22, r22
 f0e:	77 1f       	adc	r23, r23
 f10:	88 1f       	adc	r24, r24
 f12:	91 50       	subi	r25, 0x01	; 1
 f14:	50 40       	sbci	r21, 0x00	; 0
 f16:	a9 f7       	brne	.-22     	; 0xf02 <__mulsf3_pse+0x64>
 f18:	9e 3f       	cpi	r25, 0xFE	; 254
 f1a:	51 05       	cpc	r21, r1
 f1c:	80 f0       	brcs	.+32     	; 0xf3e <__mulsf3_pse+0xa0>
 f1e:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
 f22:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_szero>
 f26:	5f 3f       	cpi	r21, 0xFF	; 255
 f28:	e4 f3       	brlt	.-8      	; 0xf22 <__mulsf3_pse+0x84>
 f2a:	98 3e       	cpi	r25, 0xE8	; 232
 f2c:	d4 f3       	brlt	.-12     	; 0xf22 <__mulsf3_pse+0x84>
 f2e:	86 95       	lsr	r24
 f30:	77 95       	ror	r23
 f32:	67 95       	ror	r22
 f34:	b7 95       	ror	r27
 f36:	f7 95       	ror	r31
 f38:	e7 95       	ror	r30
 f3a:	9f 5f       	subi	r25, 0xFF	; 255
 f3c:	c1 f7       	brne	.-16     	; 0xf2e <__mulsf3_pse+0x90>
 f3e:	fe 2b       	or	r31, r30
 f40:	88 0f       	add	r24, r24
 f42:	91 1d       	adc	r25, r1
 f44:	96 95       	lsr	r25
 f46:	87 95       	ror	r24
 f48:	97 f9       	bld	r25, 7
 f4a:	08 95       	ret

00000f4c <__udivmodsi4>:
 f4c:	a1 e2       	ldi	r26, 0x21	; 33
 f4e:	1a 2e       	mov	r1, r26
 f50:	aa 1b       	sub	r26, r26
 f52:	bb 1b       	sub	r27, r27
 f54:	fd 01       	movw	r30, r26
 f56:	0d c0       	rjmp	.+26     	; 0xf72 <__udivmodsi4_ep>

00000f58 <__udivmodsi4_loop>:
 f58:	aa 1f       	adc	r26, r26
 f5a:	bb 1f       	adc	r27, r27
 f5c:	ee 1f       	adc	r30, r30
 f5e:	ff 1f       	adc	r31, r31
 f60:	a2 17       	cp	r26, r18
 f62:	b3 07       	cpc	r27, r19
 f64:	e4 07       	cpc	r30, r20
 f66:	f5 07       	cpc	r31, r21
 f68:	20 f0       	brcs	.+8      	; 0xf72 <__udivmodsi4_ep>
 f6a:	a2 1b       	sub	r26, r18
 f6c:	b3 0b       	sbc	r27, r19
 f6e:	e4 0b       	sbc	r30, r20
 f70:	f5 0b       	sbc	r31, r21

00000f72 <__udivmodsi4_ep>:
 f72:	66 1f       	adc	r22, r22
 f74:	77 1f       	adc	r23, r23
 f76:	88 1f       	adc	r24, r24
 f78:	99 1f       	adc	r25, r25
 f7a:	1a 94       	dec	r1
 f7c:	69 f7       	brne	.-38     	; 0xf58 <__udivmodsi4_loop>
 f7e:	60 95       	com	r22
 f80:	70 95       	com	r23
 f82:	80 95       	com	r24
 f84:	90 95       	com	r25
 f86:	9b 01       	movw	r18, r22
 f88:	ac 01       	movw	r20, r24
 f8a:	bd 01       	movw	r22, r26
 f8c:	cf 01       	movw	r24, r30
 f8e:	08 95       	ret

00000f90 <__tablejump2__>:
 f90:	ee 0f       	add	r30, r30
 f92:	ff 1f       	adc	r31, r31
 f94:	05 90       	lpm	r0, Z+
 f96:	f4 91       	lpm	r31, Z
 f98:	e0 2d       	mov	r30, r0
 f9a:	09 94       	ijmp

00000f9c <__umulhisi3>:
 f9c:	a2 9f       	mul	r26, r18
 f9e:	b0 01       	movw	r22, r0
 fa0:	b3 9f       	mul	r27, r19
 fa2:	c0 01       	movw	r24, r0
 fa4:	a3 9f       	mul	r26, r19
 fa6:	70 0d       	add	r23, r0
 fa8:	81 1d       	adc	r24, r1
 faa:	11 24       	eor	r1, r1
 fac:	91 1d       	adc	r25, r1
 fae:	b2 9f       	mul	r27, r18
 fb0:	70 0d       	add	r23, r0
 fb2:	81 1d       	adc	r24, r1
 fb4:	11 24       	eor	r1, r1
 fb6:	91 1d       	adc	r25, r1
 fb8:	08 95       	ret

00000fba <_exit>:
 fba:	f8 94       	cli

00000fbc <__stop_program>:
 fbc:	ff cf       	rjmp	.-2      	; 0xfbc <__stop_program>
